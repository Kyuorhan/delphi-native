unit Model.Query;

interface

  uses
    Data.DB,
    System.SysUtils,
    Interfaces.Crud,
    Interfaces.ComponenteQuery,
    Controller.ComponenteQuery;

  type
   TSQLQuery = class(TInterfacedObject,iSQLOpen,iSQLInsert,iSQLUpdate,iSQLDelete,iSQLCancelar)
     private
       FQuery : iQuery;
     public
     Constructor Create;
     destructor destroy; override;
       class function NewOpen : iSQLOpen;
       class function NewInert : iSQLInsert;
       class function NewUpdate : iSQLUpdate; overload;
       class function NewDelete : iSQLDelete; overload;
       class function NewCancelar : iSQLCancelar; overload;

       function _Open(aTabela : string) : iSQLOpen; overload;
       function _Open(aTabela : string; aParam : String; aDataSource : TDataSource) : iSQLOpen; overload;
       function _Insert(aTabela : String) : iSQLInsert;
       function _Update(aTabela : String; aParam : Integer) : iSQLUpdate;
       function _Delete(aTabela : String; aParam : Integer) : iSQLDelete;
       function _Cacelar(aDataSource : TDataSource) : iSQLCancelar;
   end;

implementation

{ TSQLQuery }

constructor TSQLQuery.Create;
begin
  FQuery := TControllerComponenteQuery.New.Query;
end;

destructor TSQLQuery.destroy;
begin
  inherited;
end;

function TSQLQuery._Open(aTabela: string): iSQLOpen;
begin
  FQuery.Dataset.SQL.Clear;
  FQuery.Dataset.SQL.Add('select * from ' + aTabela);
  FQuery.Dataset.Open();

  aDataSource.DataSet := FQuery.Dataset;

  Result := Self;
end;

function TSQLQuery._Open(aTabela, aParam: String;aDataSource: TDataSource): iSQLOpen;
begin

end;

function TSQLQuery._Insert(aTabela: String): iSQLInsert;
begin

end;

function TSQLQuery._Update(aTabela: String; aParam: Integer): iSQLUpdate;
begin

end;

function TSQLQuery._Cacelar(aDataSource: TDataSource): iSQLCancelar;
begin

end;

function TSQLQuery._Delete(aTabela: String; aParam: Integer): iSQLDelete;
begin

end;

class function TSQLQuery.NewOpen: iSQLOpen;
begin
  Result := Self.Create;
end;

class function TSQLQuery.NewInert: iSQLInsert;
begin
  Result := Self.Create;
end;

class function TSQLQuery.NewCancelar: iSQLCancelar;
begin
  Result := Self.Create;
end;

class function TSQLQuery.NewUpdate: iSQLUpdate;
begin
  Result := Self.Create;
end;

class function TSQLQuery.NewDelete: iSQLDelete;
begin
  Result := Self.Create;
end;

end.
